export class ConfigGenerator {
  static generate(techStack: string): string {
    const config = {
      application: {
        name: this.getAppName(techStack),
        version: "1.0.0",
        environment: "production"
      },
      container: {
        image: this.getImageName(techStack),
        port: this.getDefaultPort(techStack),
        healthCheck: {
          enabled: true,
          path: "/health",
          interval: "30s",
          timeout: "3s",
          retries: 3
        }
      },
      resources: {
        memory: this.getMemoryRequirement(techStack),
        cpu: this.getCPURequirement(techStack)
      },
      environment: this.getEnvironmentVariables(techStack),
      volumes: this.getVolumes(techStack),
      networks: ["app-network"],
      security: {
        runAsNonRoot: true,
        readOnlyRootFilesystem: false,
        allowPrivilegeEscalation: false
      },
      logging: {
        driver: "json-file",
        options: {
          "max-size": "10m",
          "max-file": "3"
        }
      }
    };

    return `# Auto-generated configuration for ${techStack} application
# Generated by Auto-Dock It

${this.yamlStringify(config)}`;
  }

  static generateDockerCompose(techStacks: string[]): string {
    const services: any = {};
    
    techStacks.forEach((stack, index) => {
      const serviceName = this.getServiceName(stack, index);
      services[serviceName] = {
        build: {
          context: ".",
          dockerfile: index === 0 ? "Dockerfile" : `Dockerfile.${stack.toLowerCase()}`
        },
        container_name: serviceName,
        ports: [`${this.getDefaultPort(stack)}:${this.getDefaultPort(stack)}`],
        environment: this.getEnvironmentVariables(stack),
        volumes: this.getVolumes(stack),
        networks: ["app-network"],
        restart: "unless-stopped",
        healthcheck: {
          test: [`CMD`, `curl`, `-f`, `http://localhost:${this.getDefaultPort(stack)}/health`],
          interval: "30s",
          timeout: "3s",
          retries: 3,
          start_period: "40s"
        },
        depends_on: index > 0 ? [this.getServiceName(techStacks[0], 0)] : undefined
      };
    });

    // Add common services
    if (this.needsDatabase(techStacks)) {
      services.database = {
        image: "postgres:15-alpine",
        container_name: "app-database",
        environment: {
          POSTGRES_DB: "appdb",
          POSTGRES_USER: "appuser",
          POSTGRES_PASSWORD: "apppassword"
        },
        volumes: ["postgres_data:/var/lib/postgresql/data"],
        networks: ["app-network"],
        restart: "unless-stopped"
      };
    }

    if (this.needsRedis(techStacks)) {
      services.redis = {
        image: "redis:7-alpine",
        container_name: "app-redis",
        volumes: ["redis_data:/data"],
        networks: ["app-network"],
        restart: "unless-stopped"
      };
    }

    const compose = {
      version: "3.8",
      services,
      networks: {
        "app-network": {
          driver: "bridge"
        }
      },
      volumes: this.getComposeVolumes(techStacks)
    };

    return `# Docker Compose configuration
# Generated by Auto-Dock It
# 
# Usage:
#   docker-compose up -d
#   docker-compose down
#   docker-compose logs -f

${this.yamlStringify(compose)}`;
  }

  private static getAppName(techStack: string): string {
    return `${techStack.toLowerCase().replace(/[^a-z0-9]/g, '')}-app`;
  }

  private static getImageName(techStack: string): string {
    const imageMap: { [key: string]: string } = {
      'node.js': 'node:18-alpine',
      'python': 'python:3.11-slim',
      'java': 'openjdk:17-jre-slim',
      'go': 'golang:1.21-alpine',
      'php': 'php:8.2-fpm-alpine',
      'ruby': 'ruby:3.2-alpine',
      'rust': 'rust:1.70',
      '.net': 'mcr.microsoft.com/dotnet/aspnet:8.0'
    };
    return imageMap[techStack.toLowerCase()] || 'node:18-alpine';
  }

  private static getDefaultPort(techStack: string): number {
    const portMap: { [key: string]: number } = {
      'node.js': 3000,
      'python': 8000,
      'java': 8080,
      'go': 8080,
      'php': 9000,
      'ruby': 3000,
      'rust': 8080,
      '.net': 80
    };
    return portMap[techStack.toLowerCase()] || 3000;
  }

  private static getMemoryRequirement(techStack: string): string {
    const memoryMap: { [key: string]: string } = {
      'node.js': '512Mi',
      'python': '512Mi',
      'java': '1Gi',
      'go': '256Mi',
      'php': '512Mi',
      'ruby': '512Mi',
      'rust': '256Mi',
      '.net': '512Mi'
    };
    return memoryMap[techStack.toLowerCase()] || '512Mi';
  }

  private static getCPURequirement(techStack: string): string {
    const cpuMap: { [key: string]: string } = {
      'node.js': '0.5',
      'python': '0.5',
      'java': '1.0',
      'go': '0.3',
      'php': '0.5',
      'ruby': '0.5',
      'rust': '0.3',
      '.net': '0.5'
    };
    return cpuMap[techStack.toLowerCase()] || '0.5';
  }

  private static getEnvironmentVariables(techStack: string): { [key: string]: string } {
    const envMap: { [key: string]: { [key: string]: string } } = {
      'node.js': {
        NODE_ENV: 'production',
        PORT: '3000'
      },
      'python': {
        PYTHONPATH: '/app',
        PYTHONUNBUFFERED: '1',
        PORT: '8000'
      },
      'java': {
        JAVA_OPTS: '-Xmx512m -Xms256m',
        SERVER_PORT: '8080'
      },
      'go': {
        GO_ENV: 'production',
        PORT: '8080'
      },
      'php': {
        PHP_INI_SCAN_DIR: '/usr/local/etc/php/conf.d',
        APP_ENV: 'production'
      },
      'ruby': {
        RAILS_ENV: 'production',
        PORT: '3000'
      },
      'rust': {
        RUST_LOG: 'info',
        PORT: '8080'
      },
      '.net': {
        ASPNETCORE_ENVIRONMENT: 'Production',
        ASPNETCORE_URLS: 'http://+:80'
      }
    };
    return envMap[techStack.toLowerCase()] || envMap['node.js'];
  }

  private static getVolumes(techStack: string): string[] {
    const volumeMap: { [key: string]: string[] } = {
      'node.js': ['./logs:/app/logs'],
      'python': ['./logs:/app/logs'],
      'java': ['./logs:/app/logs'],
      'go': ['./logs:/app/logs'],
      'php': ['./storage:/var/www/storage'],
      'ruby': ['./log:/app/log', './tmp:/app/tmp'],
      'rust': ['./logs:/app/logs'],
      '.net': ['./logs:/app/logs']
    };
    return volumeMap[techStack.toLowerCase()] || volumeMap['node.js'];
  }

  private static getServiceName(techStack: string, index: number): string {
    const baseName = techStack.toLowerCase().replace(/[^a-z0-9]/g, '');
    return index === 0 ? `app-${baseName}` : `${baseName}-service`;
  }

  private static needsDatabase(techStacks: string[]): boolean {
    return techStacks.some(stack => 
      ['python', 'java', 'ruby', '.net', 'php'].includes(stack.toLowerCase())
    );
  }

  private static needsRedis(techStacks: string[]): boolean {
    return techStacks.length > 1 || techStacks.some(stack => 
      ['node.js', 'python', 'ruby'].includes(stack.toLowerCase())
    );
  }

  private static getComposeVolumes(techStacks: string[]): { [key: string]: object } {
    const volumes: { [key: string]: object } = {};
    
    if (this.needsDatabase(techStacks)) {
      volumes.postgres_data = {};
    }
    
    if (this.needsRedis(techStacks)) {
      volumes.redis_data = {};
    }
    
    return volumes;
  }

  private static yamlStringify(obj: any, indent = 0): string {
    const spaces = '  '.repeat(indent);
    let result = '';

    if (obj === null || obj === undefined) {
      return 'null';
    }

    if (typeof obj === 'string') {
      return obj.includes('\n') ? `|\n${obj.split('\n').map(line => `${spaces}  ${line}`).join('\n')}` : `"${obj}"`;
    }

    if (typeof obj === 'number' || typeof obj === 'boolean') {
      return obj.toString();
    }

    if (Array.isArray(obj)) {
      if (obj.length === 0) return '[]';
      return `\n${obj.map(item => `${spaces}- ${this.yamlStringify(item, indent + 1).replace(/^\s*/, '')}`).join('\n')}`;
    }

    if (typeof obj === 'object') {
      const keys = Object.keys(obj).filter(key => obj[key] !== undefined);
      if (keys.length === 0) return '{}';
      
      return `\n${keys.map(key => {
        const value = this.yamlStringify(obj[key], indent + 1);
        return `${spaces}${key}:${value.startsWith('\n') ? value : ` ${value}`}`;
      }).join('\n')}`;
    }

    return obj.toString();
  }
}